//
// Generated by Bluespec Compiler, version 2025.01 (build a798d8a9)
//
// On Sat Mar 22 17:38:55 PDT 2025
//
//
// Ports:
// Name                         I/O  size props
// ARADDR                         O    32 const
// ARPROT                         O     3 const
// ARVALID                        O     1 const
// RREADY                         O     1 const
// AWADDR                         O    32 reg
// AWPROT                         O     3 const
// AWVALID                        O     1 const
// WDATA                          O    32 reg
// WSTRB                          O     4 const
// WVALID                         O     1 const
// BREADY                         O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// ARREADY                        I     1 unused
// RDATA                          I    32 unused
// RRESP                          I     2 unused
// RVALID                         I     1 unused
// AWREADY                        I     1 unused
// WREADY                         I     1 unused
// BRESP                          I     2 unused
// BVALID                         I     1 unused
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module nm(CLK,
	  RST_N,

	  ARADDR,

	  ARPROT,

	  ARVALID,

	  ARREADY,

	  RREADY,

	  RDATA,

	  RRESP,

	  RVALID,

	  AWADDR,

	  AWPROT,

	  AWVALID,

	  AWREADY,

	  WDATA,

	  WSTRB,

	  WVALID,

	  WREADY,

	  BREADY,

	  BRESP,

	  BVALID);
  input  CLK;
  input  RST_N;

  // value method read_arADDR
  output [31 : 0] ARADDR;

  // value method read_arPROT
  output [2 : 0] ARPROT;

  // value method read_arVALID
  output ARVALID;

  // action method read_arREADY
  input  ARREADY;

  // value method read_rREADY
  output RREADY;

  // action method read_rDATA
  input  [31 : 0] RDATA;

  // action method read_rRESP
  input  [1 : 0] RRESP;

  // action method read_rVALID
  input  RVALID;

  // value method write_awADDR
  output [31 : 0] AWADDR;

  // value method write_awPROT
  output [2 : 0] AWPROT;

  // value method write_awVALID
  output AWVALID;

  // action method write_awREADY
  input  AWREADY;

  // value method write_wDATA
  output [31 : 0] WDATA;

  // value method write_wSTRB
  output [3 : 0] WSTRB;

  // value method write_wVALID
  output WVALID;

  // action method write_wREADY
  input  WREADY;

  // value method write_bREADY
  output BREADY;

  // action method write_bRESP
  input  [1 : 0] BRESP;

  // action method write_bVALID
  input  BVALID;

  // signals for module outputs
  wire [31 : 0] ARADDR, AWADDR, WDATA;
  wire [3 : 0] WSTRB;
  wire [2 : 0] ARPROT, AWPROT;
  wire ARVALID, AWVALID, BREADY, RREADY, WVALID;

  // inlined wires
  wire [96 : 0] p_sqrtVals_0_stage2_rv$port0__write_1,
		p_sqrtVals_0_stage2_rv$port1__read,
		p_sqrtVals_0_stage2_rv$port1__write_1,
		p_sqrtVals_0_stage2_rv$port2__read,
		p_sqrtVals_1_stage2_rv$port1__read,
		p_sqrtVals_1_stage2_rv$port1__write_1,
		p_sqrtVals_1_stage2_rv$port2__read;
  wire [64 : 0] p_sqrtVals_0_inputFifo_rv$port0__write_1,
		p_sqrtVals_0_inputFifo_rv$port1__read,
		p_sqrtVals_0_inputFifo_rv$port1__write_1,
		p_sqrtVals_0_inputFifo_rv$port2__read,
		p_sqrtVals_0_outputFifo_rv$port1__read,
		p_sqrtVals_0_outputFifo_rv$port1__write_1,
		p_sqrtVals_0_outputFifo_rv$port2__read,
		p_sqrtVals_0_stage1_rv$port1__read,
		p_sqrtVals_0_stage1_rv$port1__write_1,
		p_sqrtVals_0_stage1_rv$port2__read,
		p_sqrtVals_0_stage3_rv$port1__read,
		p_sqrtVals_0_stage3_rv$port1__write_1,
		p_sqrtVals_0_stage3_rv$port2__read,
		p_sqrtVals_1_inputFifo_rv$port1__read,
		p_sqrtVals_1_inputFifo_rv$port1__write_1,
		p_sqrtVals_1_inputFifo_rv$port2__read,
		p_sqrtVals_1_outputFifo_rv$port1__read,
		p_sqrtVals_1_outputFifo_rv$port1__write_1,
		p_sqrtVals_1_outputFifo_rv$port2__read,
		p_sqrtVals_1_stage1_rv$port1__read,
		p_sqrtVals_1_stage1_rv$port1__write_1,
		p_sqrtVals_1_stage1_rv$port2__read,
		p_sqrtVals_1_stage3_rv$port1__read,
		p_sqrtVals_1_stage3_rv$port1__write_1,
		p_sqrtVals_1_stage3_rv$port2__read,
		p_stages_0_rv$port1__read,
		p_stages_0_rv$port1__write_1,
		p_stages_0_rv$port2__read,
		p_stages_1_rv$port1__read,
		p_stages_1_rv$port1__write_1,
		p_stages_1_rv$port2__read,
		p_stages_2_rv$port1__read,
		p_stages_2_rv$port1__write_1,
		p_stages_2_rv$port2__read;
  wire [32 : 0] p_inputFifo_rv$port0__write_1,
		p_inputFifo_rv$port1__read,
		p_inputFifo_rv$port2__read,
		p_outputFifo_rv$port1__read,
		p_outputFifo_rv$port1__write_1,
		p_outputFifo_rv$port2__read;
  wire p_inputFifo_rv$EN_port0__write,
       p_outputFifo_rv$EN_port1__write,
       p_sqrtVals_0_inputFifo_rv$EN_port0__write,
       p_sqrtVals_0_inputFifo_rv$EN_port1__write,
       p_sqrtVals_0_outputFifo_rv$EN_port0__write,
       p_sqrtVals_0_outputFifo_rv$EN_port1__write,
       p_sqrtVals_0_stage1_rv$EN_port0__write,
       p_sqrtVals_0_stage1_rv$EN_port1__write,
       p_sqrtVals_0_stage2_rv$EN_port0__write,
       p_sqrtVals_0_stage2_rv$EN_port1__write,
       p_sqrtVals_0_stage3_rv$EN_port0__write,
       p_sqrtVals_0_stage3_rv$EN_port1__write,
       p_sqrtVals_1_inputFifo_rv$EN_port0__write,
       p_sqrtVals_1_inputFifo_rv$EN_port1__write,
       p_sqrtVals_1_outputFifo_rv$EN_port0__write,
       p_sqrtVals_1_outputFifo_rv$EN_port1__write,
       p_sqrtVals_1_stage1_rv$EN_port0__write,
       p_sqrtVals_1_stage1_rv$EN_port1__write,
       p_sqrtVals_1_stage2_rv$EN_port0__write,
       p_sqrtVals_1_stage2_rv$EN_port1__write,
       p_sqrtVals_1_stage3_rv$EN_port0__write,
       p_sqrtVals_1_stage3_rv$EN_port1__write,
       p_stages_0_rv$EN_port0__write,
       p_stages_0_rv$EN_port1__write,
       p_stages_1_rv$EN_port0__write,
       p_stages_1_rv$EN_port1__write,
       p_stages_2_rv$EN_port0__write,
       p_stages_2_rv$EN_port1__write;

  // register addr
  reg [31 : 0] addr;
  wire [31 : 0] addr$D_IN;
  wire addr$EN;

  // register p_inputFifo_rv
  reg [32 : 0] p_inputFifo_rv;
  wire [32 : 0] p_inputFifo_rv$D_IN;
  wire p_inputFifo_rv$EN;

  // register p_outputFifo_rv
  reg [32 : 0] p_outputFifo_rv;
  wire [32 : 0] p_outputFifo_rv$D_IN;
  wire p_outputFifo_rv$EN;

  // register p_sqrtVals_0_inputFifo_rv
  reg [64 : 0] p_sqrtVals_0_inputFifo_rv;
  wire [64 : 0] p_sqrtVals_0_inputFifo_rv$D_IN;
  wire p_sqrtVals_0_inputFifo_rv$EN;

  // register p_sqrtVals_0_outputFifo_rv
  reg [64 : 0] p_sqrtVals_0_outputFifo_rv;
  wire [64 : 0] p_sqrtVals_0_outputFifo_rv$D_IN;
  wire p_sqrtVals_0_outputFifo_rv$EN;

  // register p_sqrtVals_0_stage1_rv
  reg [64 : 0] p_sqrtVals_0_stage1_rv;
  wire [64 : 0] p_sqrtVals_0_stage1_rv$D_IN;
  wire p_sqrtVals_0_stage1_rv$EN;

  // register p_sqrtVals_0_stage2_rv
  reg [96 : 0] p_sqrtVals_0_stage2_rv;
  wire [96 : 0] p_sqrtVals_0_stage2_rv$D_IN;
  wire p_sqrtVals_0_stage2_rv$EN;

  // register p_sqrtVals_0_stage3_rv
  reg [64 : 0] p_sqrtVals_0_stage3_rv;
  wire [64 : 0] p_sqrtVals_0_stage3_rv$D_IN;
  wire p_sqrtVals_0_stage3_rv$EN;

  // register p_sqrtVals_1_inputFifo_rv
  reg [64 : 0] p_sqrtVals_1_inputFifo_rv;
  wire [64 : 0] p_sqrtVals_1_inputFifo_rv$D_IN;
  wire p_sqrtVals_1_inputFifo_rv$EN;

  // register p_sqrtVals_1_outputFifo_rv
  reg [64 : 0] p_sqrtVals_1_outputFifo_rv;
  wire [64 : 0] p_sqrtVals_1_outputFifo_rv$D_IN;
  wire p_sqrtVals_1_outputFifo_rv$EN;

  // register p_sqrtVals_1_stage1_rv
  reg [64 : 0] p_sqrtVals_1_stage1_rv;
  wire [64 : 0] p_sqrtVals_1_stage1_rv$D_IN;
  wire p_sqrtVals_1_stage1_rv$EN;

  // register p_sqrtVals_1_stage2_rv
  reg [96 : 0] p_sqrtVals_1_stage2_rv;
  wire [96 : 0] p_sqrtVals_1_stage2_rv$D_IN;
  wire p_sqrtVals_1_stage2_rv$EN;

  // register p_sqrtVals_1_stage3_rv
  reg [64 : 0] p_sqrtVals_1_stage3_rv;
  wire [64 : 0] p_sqrtVals_1_stage3_rv$D_IN;
  wire p_sqrtVals_1_stage3_rv$EN;

  // register p_stages_0_rv
  reg [64 : 0] p_stages_0_rv;
  wire [64 : 0] p_stages_0_rv$D_IN;
  wire p_stages_0_rv$EN;

  // register p_stages_1_rv
  reg [64 : 0] p_stages_1_rv;
  wire [64 : 0] p_stages_1_rv$D_IN;
  wire p_stages_1_rv$EN;

  // register p_stages_2_rv
  reg [64 : 0] p_stages_2_rv;
  wire [64 : 0] p_stages_2_rv$D_IN;
  wire p_stages_2_rv$EN;

  // register val
  reg [31 : 0] val;
  wire [31 : 0] val$D_IN;
  wire val$EN;

  // inputs to muxes for submodule ports
  wire [31 : 0] MUX_addr$write_1__VAL_1;

  // remaining internal signals
  wire [50 : 0] IF_SEXT_p_inputFifo_rv_port0__read__90_BITS_31_ETC___d405,
		IF_SEXT_p_sqrtVals_0_stage1_rv_port0__read__3__ETC___d35,
		IF_SEXT_p_sqrtVals_0_stage3_rv_port0__read__4__ETC___d97,
		IF_SEXT_p_sqrtVals_1_stage1_rv_port0__read__42_ETC___d164,
		IF_SEXT_p_sqrtVals_1_stage3_rv_port0__read__12_ETC___d225,
		x__h11843,
		x__h11907,
		x__h15594,
		x__h28225,
		x__h28332,
		x__h3349,
		x__h3413,
		x__h7104;
  wire [48 : 0] IF_SEXT_p_inputFifo_rv_port0__read__90_BITS_31_ETC___d417,
		IF_SEXT_p_sqrtVals_0_stage1_rv_port0__read__3__ETC___d47,
		IF_SEXT_p_sqrtVals_0_stage3_rv_port0__read__4__ETC___d109,
		IF_SEXT_p_sqrtVals_1_stage1_rv_port0__read__42_ETC___d176,
		IF_SEXT_p_sqrtVals_1_stage3_rv_port0__read__12_ETC___d237,
		x__h11420,
		x__h15171,
		x__h27802,
		x__h2909,
		x__h6681;
  wire [33 : 0] ax2_f__h11866,
		ax2_f__h15617,
		ax2_f__h28248,
		ax2_f__h3372,
		ax2_f__h7127;
  wire [31 : 0] ax1_f__h11871,
		ax1_f__h15622,
		ax1_f__h28253,
		ax1_f__h3377,
		ax1_f__h7132,
		x__h11926,
		x__h14511,
		x__h3432,
		x__h6021;
  wire [16 : 0] ax2_i__h11865,
		ax2_i__h15616,
		ax2_i__h28247,
		ax2_i__h3371,
		ax2_i__h7126;
  wire [15 : 0] p_inputFifo_rv_BITS_31_TO_16__q7,
		p_sqrtVals_0_stage1_rv_BITS_63_TO_48__q1,
		p_sqrtVals_0_stage3_rv_BITS_31_TO_16__q2,
		p_sqrtVals_1_stage1_rv_BITS_63_TO_48__q3,
		p_sqrtVals_1_stage3_rv_BITS_31_TO_16__q4,
		y_f__h12797,
		y_f__h16547,
		y_f__h29215,
		y_f__h4307,
		y_f__h8057;

  // value method read_arADDR
  assign ARADDR = 32'd0 ;

  // value method read_arPROT
  assign ARPROT = 3'd0 ;

  // value method read_arVALID
  assign ARVALID = 1'd1 ;

  // value method read_rREADY
  assign RREADY = 1'd1 ;

  // value method write_awADDR
  assign AWADDR = addr ;

  // value method write_awPROT
  assign AWPROT = 3'd0 ;

  // value method write_awVALID
  assign AWVALID = 1'd1 ;

  // value method write_wDATA
  assign WDATA = val ;

  // value method write_wSTRB
  assign WSTRB = 4'b1111 ;

  // value method write_wVALID
  assign WVALID = 1'd1 ;

  // value method write_bREADY
  assign BREADY = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_addr$write_1__VAL_1 = addr + 32'd4 ;

  // inlined wires
  assign p_stages_0_rv$EN_port0__write =
	     !p_sqrtVals_0_inputFifo_rv$port1__read[64] && p_stages_0_rv[64] ;
  assign p_stages_0_rv$port1__read =
	     p_stages_0_rv$EN_port0__write ?
	       p_sqrtVals_0_inputFifo_rv$port0__write_1 :
	       p_stages_0_rv ;
  assign p_stages_0_rv$EN_port1__write =
	     !p_stages_0_rv$port1__read[64] && p_inputFifo_rv[32] ;
  assign p_stages_0_rv$port1__write_1 =
	     { 1'd1,
	       p_inputFifo_rv[31:0],
	       ((p_inputFifo_rv[31:0] ^ 32'h80000000) < 32'h80010000) ?
		 32'd32768 :
		 ((!x__h27802[48] &&
		   (x__h27802[31] || x__h27802[48:32] != 17'd0)) ?
		    32'h7FFFFFFF :
		    ((x__h27802[48] &&
		      (!x__h27802[31] || ~x__h27802[48:32] != 17'd0)) ?
		       32'h80000000 :
		       x__h27802[31:0])) } ;
  assign p_stages_0_rv$port2__read =
	     p_stages_0_rv$EN_port1__write ?
	       p_stages_0_rv$port1__write_1 :
	       p_stages_0_rv$port1__read ;
  assign p_stages_1_rv$EN_port0__write =
	     !p_sqrtVals_1_inputFifo_rv$port1__read[64] && p_stages_1_rv[64] ;
  assign p_stages_1_rv$port1__read =
	     p_stages_1_rv$EN_port0__write ?
	       p_sqrtVals_0_inputFifo_rv$port0__write_1 :
	       p_stages_1_rv ;
  assign p_stages_1_rv$EN_port1__write =
	     !p_stages_1_rv$port1__read[64] &&
	     p_sqrtVals_0_outputFifo_rv[64] ;
  assign p_stages_1_rv$port1__write_1 =
	     { 1'd1, p_sqrtVals_0_outputFifo_rv[63:0] } ;
  assign p_stages_1_rv$port2__read =
	     p_stages_1_rv$EN_port1__write ?
	       p_stages_1_rv$port1__write_1 :
	       p_stages_1_rv$port1__read ;
  assign p_stages_2_rv$EN_port0__write =
	     !p_outputFifo_rv$port1__read[32] && p_stages_2_rv[64] ;
  assign p_stages_2_rv$port1__read =
	     p_stages_2_rv$EN_port0__write ?
	       p_sqrtVals_0_inputFifo_rv$port0__write_1 :
	       p_stages_2_rv ;
  assign p_stages_2_rv$EN_port1__write =
	     !p_stages_2_rv$port1__read[64] &&
	     p_sqrtVals_1_outputFifo_rv[64] ;
  assign p_stages_2_rv$port1__write_1 =
	     { 1'd1, p_sqrtVals_1_outputFifo_rv[63:0] } ;
  assign p_stages_2_rv$port2__read =
	     p_stages_2_rv$EN_port1__write ?
	       p_stages_2_rv$port1__write_1 :
	       p_stages_2_rv$port1__read ;
  assign p_sqrtVals_0_inputFifo_rv$EN_port0__write =
	     !p_sqrtVals_0_stage1_rv$port1__read[64] &&
	     p_sqrtVals_0_inputFifo_rv[64] ;
  assign p_sqrtVals_0_inputFifo_rv$port0__write_1 =
	     { 1'd0,
	       64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign p_sqrtVals_0_inputFifo_rv$port1__read =
	     p_sqrtVals_0_inputFifo_rv$EN_port0__write ?
	       p_sqrtVals_0_inputFifo_rv$port0__write_1 :
	       p_sqrtVals_0_inputFifo_rv ;
  assign p_sqrtVals_0_inputFifo_rv$EN_port1__write =
	     !p_sqrtVals_0_inputFifo_rv$port1__read[64] && p_stages_0_rv[64] ;
  assign p_sqrtVals_0_inputFifo_rv$port1__write_1 =
	     { 1'd1, p_stages_0_rv[63:0] } ;
  assign p_sqrtVals_0_inputFifo_rv$port2__read =
	     p_sqrtVals_0_inputFifo_rv$EN_port1__write ?
	       p_sqrtVals_0_inputFifo_rv$port1__write_1 :
	       p_sqrtVals_0_inputFifo_rv$port1__read ;
  assign p_sqrtVals_0_stage1_rv$EN_port0__write =
	     !p_sqrtVals_0_stage2_rv$port1__read[96] &&
	     p_sqrtVals_0_stage1_rv[64] ;
  assign p_sqrtVals_0_stage1_rv$port1__read =
	     p_sqrtVals_0_stage1_rv$EN_port0__write ?
	       p_sqrtVals_0_inputFifo_rv$port0__write_1 :
	       p_sqrtVals_0_stage1_rv ;
  assign p_sqrtVals_0_stage1_rv$EN_port1__write =
	     !p_sqrtVals_0_stage1_rv$port1__read[64] &&
	     p_sqrtVals_0_inputFifo_rv[64] ;
  assign p_sqrtVals_0_stage1_rv$port1__write_1 =
	     { 1'd1, p_sqrtVals_0_inputFifo_rv[63:0] } ;
  assign p_sqrtVals_0_stage1_rv$port2__read =
	     p_sqrtVals_0_stage1_rv$EN_port1__write ?
	       p_sqrtVals_0_stage1_rv$port1__write_1 :
	       p_sqrtVals_0_stage1_rv$port1__read ;
  assign p_sqrtVals_0_stage2_rv$EN_port0__write =
	     !p_sqrtVals_0_stage3_rv$port1__read[64] &&
	     p_sqrtVals_0_stage2_rv[96] ;
  assign p_sqrtVals_0_stage2_rv$port0__write_1 =
	     { 1'd0,
	       96'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign p_sqrtVals_0_stage2_rv$port1__read =
	     p_sqrtVals_0_stage2_rv$EN_port0__write ?
	       p_sqrtVals_0_stage2_rv$port0__write_1 :
	       p_sqrtVals_0_stage2_rv ;
  assign p_sqrtVals_0_stage2_rv$EN_port1__write =
	     !p_sqrtVals_0_stage2_rv$port1__read[96] &&
	     p_sqrtVals_0_stage1_rv[64] ;
  assign p_sqrtVals_0_stage2_rv$port1__write_1 =
	     { 1'd1,
	       p_sqrtVals_0_stage1_rv[63:0],
	       (!x__h2909[48] && (x__h2909[31] || x__h2909[48:32] != 17'd0)) ?
		 32'h7FFFFFFF :
		 ((x__h2909[48] &&
		   (!x__h2909[31] || ~x__h2909[48:32] != 17'd0)) ?
		    32'h80000000 :
		    x__h2909[31:0]) } ;
  assign p_sqrtVals_0_stage2_rv$port2__read =
	     p_sqrtVals_0_stage2_rv$EN_port1__write ?
	       p_sqrtVals_0_stage2_rv$port1__write_1 :
	       p_sqrtVals_0_stage2_rv$port1__read ;
  assign p_sqrtVals_0_stage3_rv$EN_port0__write =
	     !p_sqrtVals_0_outputFifo_rv$port1__read[64] &&
	     p_sqrtVals_0_stage3_rv[64] ;
  assign p_sqrtVals_0_stage3_rv$port1__read =
	     p_sqrtVals_0_stage3_rv$EN_port0__write ?
	       p_sqrtVals_0_inputFifo_rv$port0__write_1 :
	       p_sqrtVals_0_stage3_rv ;
  assign p_sqrtVals_0_stage3_rv$EN_port1__write =
	     !p_sqrtVals_0_stage3_rv$port1__read[64] &&
	     p_sqrtVals_0_stage2_rv[96] ;
  assign p_sqrtVals_0_stage3_rv$port1__write_1 =
	     { 1'd1, p_sqrtVals_0_stage2_rv[95:64], x__h6021 } ;
  assign p_sqrtVals_0_stage3_rv$port2__read =
	     p_sqrtVals_0_stage3_rv$EN_port1__write ?
	       p_sqrtVals_0_stage3_rv$port1__write_1 :
	       p_sqrtVals_0_stage3_rv$port1__read ;
  assign p_sqrtVals_0_outputFifo_rv$EN_port0__write =
	     !p_stages_1_rv$port1__read[64] &&
	     p_sqrtVals_0_outputFifo_rv[64] ;
  assign p_sqrtVals_0_outputFifo_rv$port1__read =
	     p_sqrtVals_0_outputFifo_rv$EN_port0__write ?
	       p_sqrtVals_0_inputFifo_rv$port0__write_1 :
	       p_sqrtVals_0_outputFifo_rv ;
  assign p_sqrtVals_0_outputFifo_rv$EN_port1__write =
	     !p_sqrtVals_0_outputFifo_rv$port1__read[64] &&
	     p_sqrtVals_0_stage3_rv[64] ;
  assign p_sqrtVals_0_outputFifo_rv$port1__write_1 =
	     { 1'd1,
	       p_sqrtVals_0_stage3_rv[63:32],
	       (!x__h6681[48] && (x__h6681[31] || x__h6681[48:32] != 17'd0)) ?
		 32'h7FFFFFFF :
		 ((x__h6681[48] &&
		   (!x__h6681[31] || ~x__h6681[48:32] != 17'd0)) ?
		    32'h80000000 :
		    x__h6681[31:0]) } ;
  assign p_sqrtVals_0_outputFifo_rv$port2__read =
	     p_sqrtVals_0_outputFifo_rv$EN_port1__write ?
	       p_sqrtVals_0_outputFifo_rv$port1__write_1 :
	       p_sqrtVals_0_outputFifo_rv$port1__read ;
  assign p_sqrtVals_1_inputFifo_rv$EN_port0__write =
	     !p_sqrtVals_1_stage1_rv$port1__read[64] &&
	     p_sqrtVals_1_inputFifo_rv[64] ;
  assign p_sqrtVals_1_inputFifo_rv$port1__read =
	     p_sqrtVals_1_inputFifo_rv$EN_port0__write ?
	       p_sqrtVals_0_inputFifo_rv$port0__write_1 :
	       p_sqrtVals_1_inputFifo_rv ;
  assign p_sqrtVals_1_inputFifo_rv$EN_port1__write =
	     !p_sqrtVals_1_inputFifo_rv$port1__read[64] && p_stages_1_rv[64] ;
  assign p_sqrtVals_1_inputFifo_rv$port1__write_1 =
	     { 1'd1, p_stages_1_rv[63:0] } ;
  assign p_sqrtVals_1_inputFifo_rv$port2__read =
	     p_sqrtVals_1_inputFifo_rv$EN_port1__write ?
	       p_sqrtVals_1_inputFifo_rv$port1__write_1 :
	       p_sqrtVals_1_inputFifo_rv$port1__read ;
  assign p_sqrtVals_1_stage1_rv$EN_port0__write =
	     !p_sqrtVals_1_stage2_rv$port1__read[96] &&
	     p_sqrtVals_1_stage1_rv[64] ;
  assign p_sqrtVals_1_stage1_rv$port1__read =
	     p_sqrtVals_1_stage1_rv$EN_port0__write ?
	       p_sqrtVals_0_inputFifo_rv$port0__write_1 :
	       p_sqrtVals_1_stage1_rv ;
  assign p_sqrtVals_1_stage1_rv$EN_port1__write =
	     !p_sqrtVals_1_stage1_rv$port1__read[64] &&
	     p_sqrtVals_1_inputFifo_rv[64] ;
  assign p_sqrtVals_1_stage1_rv$port1__write_1 =
	     { 1'd1, p_sqrtVals_1_inputFifo_rv[63:0] } ;
  assign p_sqrtVals_1_stage1_rv$port2__read =
	     p_sqrtVals_1_stage1_rv$EN_port1__write ?
	       p_sqrtVals_1_stage1_rv$port1__write_1 :
	       p_sqrtVals_1_stage1_rv$port1__read ;
  assign p_sqrtVals_1_stage2_rv$EN_port0__write =
	     !p_sqrtVals_1_stage3_rv$port1__read[64] &&
	     p_sqrtVals_1_stage2_rv[96] ;
  assign p_sqrtVals_1_stage2_rv$port1__read =
	     p_sqrtVals_1_stage2_rv$EN_port0__write ?
	       p_sqrtVals_0_stage2_rv$port0__write_1 :
	       p_sqrtVals_1_stage2_rv ;
  assign p_sqrtVals_1_stage2_rv$EN_port1__write =
	     !p_sqrtVals_1_stage2_rv$port1__read[96] &&
	     p_sqrtVals_1_stage1_rv[64] ;
  assign p_sqrtVals_1_stage2_rv$port1__write_1 =
	     { 1'd1,
	       p_sqrtVals_1_stage1_rv[63:0],
	       (!x__h11420[48] &&
		(x__h11420[31] || x__h11420[48:32] != 17'd0)) ?
		 32'h7FFFFFFF :
		 ((x__h11420[48] &&
		   (!x__h11420[31] || ~x__h11420[48:32] != 17'd0)) ?
		    32'h80000000 :
		    x__h11420[31:0]) } ;
  assign p_sqrtVals_1_stage2_rv$port2__read =
	     p_sqrtVals_1_stage2_rv$EN_port1__write ?
	       p_sqrtVals_1_stage2_rv$port1__write_1 :
	       p_sqrtVals_1_stage2_rv$port1__read ;
  assign p_sqrtVals_1_stage3_rv$EN_port0__write =
	     !p_sqrtVals_1_outputFifo_rv$port1__read[64] &&
	     p_sqrtVals_1_stage3_rv[64] ;
  assign p_sqrtVals_1_stage3_rv$port1__read =
	     p_sqrtVals_1_stage3_rv$EN_port0__write ?
	       p_sqrtVals_0_inputFifo_rv$port0__write_1 :
	       p_sqrtVals_1_stage3_rv ;
  assign p_sqrtVals_1_stage3_rv$EN_port1__write =
	     !p_sqrtVals_1_stage3_rv$port1__read[64] &&
	     p_sqrtVals_1_stage2_rv[96] ;
  assign p_sqrtVals_1_stage3_rv$port1__write_1 =
	     { 1'd1, p_sqrtVals_1_stage2_rv[95:64], x__h14511 } ;
  assign p_sqrtVals_1_stage3_rv$port2__read =
	     p_sqrtVals_1_stage3_rv$EN_port1__write ?
	       p_sqrtVals_1_stage3_rv$port1__write_1 :
	       p_sqrtVals_1_stage3_rv$port1__read ;
  assign p_sqrtVals_1_outputFifo_rv$EN_port0__write =
	     !p_stages_2_rv$port1__read[64] &&
	     p_sqrtVals_1_outputFifo_rv[64] ;
  assign p_sqrtVals_1_outputFifo_rv$port1__read =
	     p_sqrtVals_1_outputFifo_rv$EN_port0__write ?
	       p_sqrtVals_0_inputFifo_rv$port0__write_1 :
	       p_sqrtVals_1_outputFifo_rv ;
  assign p_sqrtVals_1_outputFifo_rv$EN_port1__write =
	     !p_sqrtVals_1_outputFifo_rv$port1__read[64] &&
	     p_sqrtVals_1_stage3_rv[64] ;
  assign p_sqrtVals_1_outputFifo_rv$port1__write_1 =
	     { 1'd1,
	       p_sqrtVals_1_stage3_rv[63:32],
	       (!x__h15171[48] &&
		(x__h15171[31] || x__h15171[48:32] != 17'd0)) ?
		 32'h7FFFFFFF :
		 ((x__h15171[48] &&
		   (!x__h15171[31] || ~x__h15171[48:32] != 17'd0)) ?
		    32'h80000000 :
		    x__h15171[31:0]) } ;
  assign p_sqrtVals_1_outputFifo_rv$port2__read =
	     p_sqrtVals_1_outputFifo_rv$EN_port1__write ?
	       p_sqrtVals_1_outputFifo_rv$port1__write_1 :
	       p_sqrtVals_1_outputFifo_rv$port1__read ;
  assign p_inputFifo_rv$EN_port0__write =
	     !p_stages_0_rv$port1__read[64] && p_inputFifo_rv[32] ;
  assign p_inputFifo_rv$port0__write_1 =
	     { 1'd0,
	       32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign p_inputFifo_rv$port1__read =
	     p_inputFifo_rv$EN_port0__write ?
	       p_inputFifo_rv$port0__write_1 :
	       p_inputFifo_rv ;
  assign p_inputFifo_rv$port2__read =
	     (!p_inputFifo_rv$port1__read[32]) ?
	       33'h100200000 :
	       p_inputFifo_rv$port1__read ;
  assign p_outputFifo_rv$port1__read =
	     p_outputFifo_rv[32] ?
	       p_inputFifo_rv$port0__write_1 :
	       p_outputFifo_rv ;
  assign p_outputFifo_rv$EN_port1__write =
	     !p_outputFifo_rv$port1__read[32] && p_stages_2_rv[64] ;
  assign p_outputFifo_rv$port1__write_1 = { 1'd1, p_stages_2_rv[31:0] } ;
  assign p_outputFifo_rv$port2__read =
	     p_outputFifo_rv$EN_port1__write ?
	       p_outputFifo_rv$port1__write_1 :
	       p_outputFifo_rv$port1__read ;

  // register addr
  assign addr$D_IN =
	     (addr != 32'h03FFFFFF) ? MUX_addr$write_1__VAL_1 : 32'h0 ;
  assign addr$EN = 1'b1 ;

  // register p_inputFifo_rv
  assign p_inputFifo_rv$D_IN = p_inputFifo_rv$port2__read ;
  assign p_inputFifo_rv$EN = 1'b1 ;

  // register p_outputFifo_rv
  assign p_outputFifo_rv$D_IN = p_outputFifo_rv$port2__read ;
  assign p_outputFifo_rv$EN = 1'b1 ;

  // register p_sqrtVals_0_inputFifo_rv
  assign p_sqrtVals_0_inputFifo_rv$D_IN =
	     p_sqrtVals_0_inputFifo_rv$port2__read ;
  assign p_sqrtVals_0_inputFifo_rv$EN = 1'b1 ;

  // register p_sqrtVals_0_outputFifo_rv
  assign p_sqrtVals_0_outputFifo_rv$D_IN =
	     p_sqrtVals_0_outputFifo_rv$port2__read ;
  assign p_sqrtVals_0_outputFifo_rv$EN = 1'b1 ;

  // register p_sqrtVals_0_stage1_rv
  assign p_sqrtVals_0_stage1_rv$D_IN = p_sqrtVals_0_stage1_rv$port2__read ;
  assign p_sqrtVals_0_stage1_rv$EN = 1'b1 ;

  // register p_sqrtVals_0_stage2_rv
  assign p_sqrtVals_0_stage2_rv$D_IN = p_sqrtVals_0_stage2_rv$port2__read ;
  assign p_sqrtVals_0_stage2_rv$EN = 1'b1 ;

  // register p_sqrtVals_0_stage3_rv
  assign p_sqrtVals_0_stage3_rv$D_IN = p_sqrtVals_0_stage3_rv$port2__read ;
  assign p_sqrtVals_0_stage3_rv$EN = 1'b1 ;

  // register p_sqrtVals_1_inputFifo_rv
  assign p_sqrtVals_1_inputFifo_rv$D_IN =
	     p_sqrtVals_1_inputFifo_rv$port2__read ;
  assign p_sqrtVals_1_inputFifo_rv$EN = 1'b1 ;

  // register p_sqrtVals_1_outputFifo_rv
  assign p_sqrtVals_1_outputFifo_rv$D_IN =
	     p_sqrtVals_1_outputFifo_rv$port2__read ;
  assign p_sqrtVals_1_outputFifo_rv$EN = 1'b1 ;

  // register p_sqrtVals_1_stage1_rv
  assign p_sqrtVals_1_stage1_rv$D_IN = p_sqrtVals_1_stage1_rv$port2__read ;
  assign p_sqrtVals_1_stage1_rv$EN = 1'b1 ;

  // register p_sqrtVals_1_stage2_rv
  assign p_sqrtVals_1_stage2_rv$D_IN = p_sqrtVals_1_stage2_rv$port2__read ;
  assign p_sqrtVals_1_stage2_rv$EN = 1'b1 ;

  // register p_sqrtVals_1_stage3_rv
  assign p_sqrtVals_1_stage3_rv$D_IN = p_sqrtVals_1_stage3_rv$port2__read ;
  assign p_sqrtVals_1_stage3_rv$EN = 1'b1 ;

  // register p_stages_0_rv
  assign p_stages_0_rv$D_IN = p_stages_0_rv$port2__read ;
  assign p_stages_0_rv$EN = 1'b1 ;

  // register p_stages_1_rv
  assign p_stages_1_rv$D_IN = p_stages_1_rv$port2__read ;
  assign p_stages_1_rv$EN = 1'b1 ;

  // register p_stages_2_rv
  assign p_stages_2_rv$D_IN = p_stages_2_rv$port2__read ;
  assign p_stages_2_rv$EN = 1'b1 ;

  // register val
  assign val$D_IN = p_outputFifo_rv[31:0] ;
  assign val$EN = p_outputFifo_rv[32] ;

  // remaining internal signals
  assign IF_SEXT_p_inputFifo_rv_port0__read__90_BITS_31_ETC___d405 =
	     x__h28332 / 32'd92681 ;
  assign IF_SEXT_p_inputFifo_rv_port0__read__90_BITS_31_ETC___d417 =
	     x__h28225[50:2] + { 33'd0, y_f__h29215 } ;
  assign IF_SEXT_p_sqrtVals_0_stage1_rv_port0__read__3__ETC___d35 =
	     x__h3413 / x__h3432 ;
  assign IF_SEXT_p_sqrtVals_0_stage1_rv_port0__read__3__ETC___d47 =
	     x__h3349[50:2] + { 33'd0, y_f__h4307 } ;
  assign IF_SEXT_p_sqrtVals_0_stage3_rv_port0__read__4__ETC___d109 =
	     x__h7104[50:2] + { 33'd0, y_f__h8057 } ;
  assign IF_SEXT_p_sqrtVals_0_stage3_rv_port0__read__4__ETC___d97 =
	     (ax2_i__h7126[16] ?
		-{ ax2_i__h7126, ax2_f__h7127 } :
		{ ax2_i__h7126, ax2_f__h7127 }) >>
	     17 ;
  assign IF_SEXT_p_sqrtVals_1_stage1_rv_port0__read__42_ETC___d164 =
	     x__h11907 / x__h11926 ;
  assign IF_SEXT_p_sqrtVals_1_stage1_rv_port0__read__42_ETC___d176 =
	     x__h11843[50:2] + { 33'd0, y_f__h12797 } ;
  assign IF_SEXT_p_sqrtVals_1_stage3_rv_port0__read__12_ETC___d225 =
	     (ax2_i__h15616[16] ?
		-{ ax2_i__h15616, ax2_f__h15617 } :
		{ ax2_i__h15616, ax2_f__h15617 }) >>
	     17 ;
  assign IF_SEXT_p_sqrtVals_1_stage3_rv_port0__read__12_ETC___d237 =
	     x__h15594[50:2] + { 33'd0, y_f__h16547 } ;
  assign ax1_f__h11871 = { p_sqrtVals_1_stage1_rv[47:32], 16'd0 } ;
  assign ax1_f__h15622 = { p_sqrtVals_1_stage3_rv[15:0], 16'd0 } ;
  assign ax1_f__h28253 = { p_inputFifo_rv[15:0], 16'd0 } ;
  assign ax1_f__h3377 = { p_sqrtVals_0_stage1_rv[47:32], 16'd0 } ;
  assign ax1_f__h7132 = { p_sqrtVals_0_stage3_rv[15:0], 16'd0 } ;
  assign ax2_f__h11866 = { ax1_f__h11871, 2'd0 } ;
  assign ax2_f__h15617 = { ax1_f__h15622, 2'd0 } ;
  assign ax2_f__h28248 = { ax1_f__h28253, 2'd0 } ;
  assign ax2_f__h3372 = { ax1_f__h3377, 2'd0 } ;
  assign ax2_f__h7127 = { ax1_f__h7132, 2'd0 } ;
  assign ax2_i__h11865 =
	     { p_sqrtVals_1_stage1_rv_BITS_63_TO_48__q3[15],
	       p_sqrtVals_1_stage1_rv_BITS_63_TO_48__q3 } ;
  assign ax2_i__h15616 =
	     { p_sqrtVals_1_stage3_rv_BITS_31_TO_16__q4[15],
	       p_sqrtVals_1_stage3_rv_BITS_31_TO_16__q4 } ;
  assign ax2_i__h28247 =
	     { p_inputFifo_rv_BITS_31_TO_16__q7[15],
	       p_inputFifo_rv_BITS_31_TO_16__q7 } ;
  assign ax2_i__h3371 =
	     { p_sqrtVals_0_stage1_rv_BITS_63_TO_48__q1[15],
	       p_sqrtVals_0_stage1_rv_BITS_63_TO_48__q1 } ;
  assign ax2_i__h7126 =
	     { p_sqrtVals_0_stage3_rv_BITS_31_TO_16__q2[15],
	       p_sqrtVals_0_stage3_rv_BITS_31_TO_16__q2 } ;
  assign p_inputFifo_rv_BITS_31_TO_16__q7 = p_inputFifo_rv[31:16] ;
  assign p_sqrtVals_0_stage1_rv_BITS_63_TO_48__q1 =
	     p_sqrtVals_0_stage1_rv[63:48] ;
  assign p_sqrtVals_0_stage3_rv_BITS_31_TO_16__q2 =
	     p_sqrtVals_0_stage3_rv[31:16] ;
  assign p_sqrtVals_1_stage1_rv_BITS_63_TO_48__q3 =
	     p_sqrtVals_1_stage1_rv[63:48] ;
  assign p_sqrtVals_1_stage3_rv_BITS_31_TO_16__q4 =
	     p_sqrtVals_1_stage3_rv[31:16] ;
  assign x__h11420 =
	     (!x__h11843[50] &&
	      IF_SEXT_p_sqrtVals_1_stage1_rv_port0__read__42_ETC___d176[48]) ?
	       49'h0FFFFFFFFFFFF :
	       IF_SEXT_p_sqrtVals_1_stage1_rv_port0__read__42_ETC___d176 ;
  assign x__h11843 =
	     (ax2_i__h11865[16] && !p_sqrtVals_1_stage1_rv[31] ||
	      !ax2_i__h11865[16] && p_sqrtVals_1_stage1_rv[31]) ?
	       -IF_SEXT_p_sqrtVals_1_stage1_rv_port0__read__42_ETC___d164 :
	       IF_SEXT_p_sqrtVals_1_stage1_rv_port0__read__42_ETC___d164 ;
  assign x__h11907 =
	     ax2_i__h11865[16] ?
	       -{ ax2_i__h11865, ax2_f__h11866 } :
	       { ax2_i__h11865, ax2_f__h11866 } ;
  assign x__h11926 =
	     p_sqrtVals_1_stage1_rv[31] ?
	       -p_sqrtVals_1_stage1_rv[31:0] :
	       p_sqrtVals_1_stage1_rv[31:0] ;
  assign x__h14511 =
	     p_sqrtVals_1_stage2_rv[63:32] + p_sqrtVals_1_stage2_rv[31:0] ;
  assign x__h15171 =
	     (!x__h15594[50] &&
	      IF_SEXT_p_sqrtVals_1_stage3_rv_port0__read__12_ETC___d237[48]) ?
	       49'h0FFFFFFFFFFFF :
	       IF_SEXT_p_sqrtVals_1_stage3_rv_port0__read__12_ETC___d237 ;
  assign x__h15594 =
	     ax2_i__h15616[16] ?
	       -IF_SEXT_p_sqrtVals_1_stage3_rv_port0__read__12_ETC___d225 :
	       IF_SEXT_p_sqrtVals_1_stage3_rv_port0__read__12_ETC___d225 ;
  assign x__h27802 =
	     (!x__h28225[50] &&
	      IF_SEXT_p_inputFifo_rv_port0__read__90_BITS_31_ETC___d417[48]) ?
	       49'h0FFFFFFFFFFFF :
	       IF_SEXT_p_inputFifo_rv_port0__read__90_BITS_31_ETC___d417 ;
  assign x__h28225 =
	     ax2_i__h28247[16] ?
	       -IF_SEXT_p_inputFifo_rv_port0__read__90_BITS_31_ETC___d405 :
	       IF_SEXT_p_inputFifo_rv_port0__read__90_BITS_31_ETC___d405 ;
  assign x__h28332 =
	     ax2_i__h28247[16] ?
	       -{ ax2_i__h28247, ax2_f__h28248 } :
	       { ax2_i__h28247, ax2_f__h28248 } ;
  assign x__h2909 =
	     (!x__h3349[50] &&
	      IF_SEXT_p_sqrtVals_0_stage1_rv_port0__read__3__ETC___d47[48]) ?
	       49'h0FFFFFFFFFFFF :
	       IF_SEXT_p_sqrtVals_0_stage1_rv_port0__read__3__ETC___d47 ;
  assign x__h3349 =
	     (ax2_i__h3371[16] && !p_sqrtVals_0_stage1_rv[31] ||
	      !ax2_i__h3371[16] && p_sqrtVals_0_stage1_rv[31]) ?
	       -IF_SEXT_p_sqrtVals_0_stage1_rv_port0__read__3__ETC___d35 :
	       IF_SEXT_p_sqrtVals_0_stage1_rv_port0__read__3__ETC___d35 ;
  assign x__h3413 =
	     ax2_i__h3371[16] ?
	       -{ ax2_i__h3371, ax2_f__h3372 } :
	       { ax2_i__h3371, ax2_f__h3372 } ;
  assign x__h3432 =
	     p_sqrtVals_0_stage1_rv[31] ?
	       -p_sqrtVals_0_stage1_rv[31:0] :
	       p_sqrtVals_0_stage1_rv[31:0] ;
  assign x__h6021 =
	     p_sqrtVals_0_stage2_rv[63:32] + p_sqrtVals_0_stage2_rv[31:0] ;
  assign x__h6681 =
	     (!x__h7104[50] &&
	      IF_SEXT_p_sqrtVals_0_stage3_rv_port0__read__4__ETC___d109[48]) ?
	       49'h0FFFFFFFFFFFF :
	       IF_SEXT_p_sqrtVals_0_stage3_rv_port0__read__4__ETC___d109 ;
  assign x__h7104 =
	     ax2_i__h7126[16] ?
	       -IF_SEXT_p_sqrtVals_0_stage3_rv_port0__read__4__ETC___d97 :
	       IF_SEXT_p_sqrtVals_0_stage3_rv_port0__read__4__ETC___d97 ;
  assign y_f__h12797 =
	     (x__h11843[1] && (x__h11843[50] || x__h11843[0])) ?
	       16'd1 :
	       16'd0 ;
  assign y_f__h16547 =
	     (x__h15594[1] && (x__h15594[50] || x__h15594[0])) ?
	       16'd1 :
	       16'd0 ;
  assign y_f__h29215 =
	     (x__h28225[1] && (x__h28225[50] || x__h28225[0])) ?
	       16'd1 :
	       16'd0 ;
  assign y_f__h4307 =
	     (x__h3349[1] && (x__h3349[50] || x__h3349[0])) ? 16'd1 : 16'd0 ;
  assign y_f__h8057 =
	     (x__h7104[1] && (x__h7104[50] || x__h7104[0])) ? 16'd1 : 16'd0 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        addr <= `BSV_ASSIGNMENT_DELAY 32'd0;
	p_inputFifo_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	p_outputFifo_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	p_sqrtVals_0_inputFifo_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	p_sqrtVals_0_outputFifo_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	p_sqrtVals_0_stage1_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	p_sqrtVals_0_stage2_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      96'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	p_sqrtVals_0_stage3_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	p_sqrtVals_1_inputFifo_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	p_sqrtVals_1_outputFifo_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	p_sqrtVals_1_stage1_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	p_sqrtVals_1_stage2_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      96'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	p_sqrtVals_1_stage3_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	p_stages_0_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	p_stages_1_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	p_stages_2_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	val <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (addr$EN) addr <= `BSV_ASSIGNMENT_DELAY addr$D_IN;
	if (p_inputFifo_rv$EN)
	  p_inputFifo_rv <= `BSV_ASSIGNMENT_DELAY p_inputFifo_rv$D_IN;
	if (p_outputFifo_rv$EN)
	  p_outputFifo_rv <= `BSV_ASSIGNMENT_DELAY p_outputFifo_rv$D_IN;
	if (p_sqrtVals_0_inputFifo_rv$EN)
	  p_sqrtVals_0_inputFifo_rv <= `BSV_ASSIGNMENT_DELAY
	      p_sqrtVals_0_inputFifo_rv$D_IN;
	if (p_sqrtVals_0_outputFifo_rv$EN)
	  p_sqrtVals_0_outputFifo_rv <= `BSV_ASSIGNMENT_DELAY
	      p_sqrtVals_0_outputFifo_rv$D_IN;
	if (p_sqrtVals_0_stage1_rv$EN)
	  p_sqrtVals_0_stage1_rv <= `BSV_ASSIGNMENT_DELAY
	      p_sqrtVals_0_stage1_rv$D_IN;
	if (p_sqrtVals_0_stage2_rv$EN)
	  p_sqrtVals_0_stage2_rv <= `BSV_ASSIGNMENT_DELAY
	      p_sqrtVals_0_stage2_rv$D_IN;
	if (p_sqrtVals_0_stage3_rv$EN)
	  p_sqrtVals_0_stage3_rv <= `BSV_ASSIGNMENT_DELAY
	      p_sqrtVals_0_stage3_rv$D_IN;
	if (p_sqrtVals_1_inputFifo_rv$EN)
	  p_sqrtVals_1_inputFifo_rv <= `BSV_ASSIGNMENT_DELAY
	      p_sqrtVals_1_inputFifo_rv$D_IN;
	if (p_sqrtVals_1_outputFifo_rv$EN)
	  p_sqrtVals_1_outputFifo_rv <= `BSV_ASSIGNMENT_DELAY
	      p_sqrtVals_1_outputFifo_rv$D_IN;
	if (p_sqrtVals_1_stage1_rv$EN)
	  p_sqrtVals_1_stage1_rv <= `BSV_ASSIGNMENT_DELAY
	      p_sqrtVals_1_stage1_rv$D_IN;
	if (p_sqrtVals_1_stage2_rv$EN)
	  p_sqrtVals_1_stage2_rv <= `BSV_ASSIGNMENT_DELAY
	      p_sqrtVals_1_stage2_rv$D_IN;
	if (p_sqrtVals_1_stage3_rv$EN)
	  p_sqrtVals_1_stage3_rv <= `BSV_ASSIGNMENT_DELAY
	      p_sqrtVals_1_stage3_rv$D_IN;
	if (p_stages_0_rv$EN)
	  p_stages_0_rv <= `BSV_ASSIGNMENT_DELAY p_stages_0_rv$D_IN;
	if (p_stages_1_rv$EN)
	  p_stages_1_rv <= `BSV_ASSIGNMENT_DELAY p_stages_1_rv$D_IN;
	if (p_stages_2_rv$EN)
	  p_stages_2_rv <= `BSV_ASSIGNMENT_DELAY p_stages_2_rv$D_IN;
	if (val$EN) val <= `BSV_ASSIGNMENT_DELAY val$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    addr = 32'hAAAAAAAA;
    p_inputFifo_rv = 33'h0AAAAAAAA;
    p_outputFifo_rv = 33'h0AAAAAAAA;
    p_sqrtVals_0_inputFifo_rv = 65'h0AAAAAAAAAAAAAAAA;
    p_sqrtVals_0_outputFifo_rv = 65'h0AAAAAAAAAAAAAAAA;
    p_sqrtVals_0_stage1_rv = 65'h0AAAAAAAAAAAAAAAA;
    p_sqrtVals_0_stage2_rv = 97'h0AAAAAAAAAAAAAAAAAAAAAAAA;
    p_sqrtVals_0_stage3_rv = 65'h0AAAAAAAAAAAAAAAA;
    p_sqrtVals_1_inputFifo_rv = 65'h0AAAAAAAAAAAAAAAA;
    p_sqrtVals_1_outputFifo_rv = 65'h0AAAAAAAAAAAAAAAA;
    p_sqrtVals_1_stage1_rv = 65'h0AAAAAAAAAAAAAAAA;
    p_sqrtVals_1_stage2_rv = 97'h0AAAAAAAAAAAAAAAAAAAAAAAA;
    p_sqrtVals_1_stage3_rv = 65'h0AAAAAAAAAAAAAAAA;
    p_stages_0_rv = 65'h0AAAAAAAAAAAAAAAA;
    p_stages_1_rv = 65'h0AAAAAAAAAAAAAAAA;
    p_stages_2_rv = 65'h0AAAAAAAAAAAAAAAA;
    val = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // nm